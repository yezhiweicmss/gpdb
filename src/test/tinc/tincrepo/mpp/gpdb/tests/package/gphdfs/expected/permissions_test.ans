-- start_ignore
-- end_ignore
/* Note that roles are defined at the system-level and are valid
 * for all databases in your Greenplum Database system. */
\echo '-- start_ignore'
-- start_ignore
revoke all on protocol gphdfs from _hadoop_perm_test_role;
psql:/path/sql_file:1: ERROR:  role "_hadoop_perm_test_role" does not exist
DROP ROLE IF EXISTS _hadoop_perm_test_role;
psql:/path/sql_file:1: NOTICE:  role "_hadoop_perm_test_role" does not exist, skipping
psql:/path/sql_file:1: NOTICE:  role "_hadoop_perm_test_role" does not exist, skipping  (seg0 test1.dh.greenplum.com:42000 pid=40907)
psql:/path/sql_file:1: NOTICE:  role "_hadoop_perm_test_role" does not exist, skipping  (seg1 test1.dh.greenplum.com:42001 pid=40909)
DROP ROLE
\echo '-- end_ignore'
-- end_ignore
/* Now create a new role. Initially this role should NOT
 * be allowed to create an external hdfs table. */
CREATE ROLE _hadoop_perm_test_role
WITH CREATEEXTTABLE
LOGIN;
psql:/path/sql_file:1: NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE ROLE
\set OLD_GP_USER :USER
\connect - _hadoop_perm_test_role;
You are now connected to database "gphdfs_db" as user "_hadoop_perm_test_role".
/* The following MUST fail! */
CREATE EXTERNAL TABLE dummy_greek (
	letter CHARACTER(1),
	english_word VARCHAR,
	some_array DOUBLE PRECISION[]
)
LOCATION ('gphdfs://sdw1.dh.greenplum.com:8020/plaintext/greek_utf8.txt')
FORMAT 'TEXT'
ENCODING 'UTF8';
psql:/path/sql_file:1: ERROR:  permission denied for external protocol gphdfs
/* Writing data must also fail */
CREATE WRITABLE EXTERNAL TABLE export_dummy_greek (
	letter CHARACTER(1),
	english_word VARCHAR,
	some_array DOUBLE PRECISION[]
)
LOCATION ('gphdfs://sdw1.dh.greenplum.com:8020/plaintext/export')
FORMAT 'TEXT' (
    DELIMITER ';'
)
ENCODING 'UTF8';
psql:/path/sql_file:1: ERROR:  permission denied for external protocol gphdfs
\connect - :OLD_GP_USER
You are now connected to database "gphdfs_db" as user "gpadmin".
--ALTER ROLE _hadoop_perm_test_role
--WITH
--CREATEEXTTABLE(type='writable', protocol='gphdfs');
grant insert on protocol gphdfs to _hadoop_perm_test_role;
GRANT
\connect - _hadoop_perm_test_role;
You are now connected to database "gphdfs_db" as user "_hadoop_perm_test_role".
/* The following MUST still fail! */
CREATE EXTERNAL TABLE dummy_greek (
	letter CHARACTER(1),
	english_word VARCHAR,
	some_array DOUBLE PRECISION[]
)
LOCATION ('gphdfs://sdw1.dh.greenplum.com:8020/plaintext/greek_utf8.txt')
FORMAT 'TEXT'
ENCODING 'UTF8';
psql:/path/sql_file:1: ERROR:  permission denied for external protocol gphdfs
/* On the other hand, creating the writable external table must work now. */
CREATE WRITABLE EXTERNAL TABLE export_dummy_greek (
	letter CHARACTER(1),
	english_word VARCHAR,
	some_array DOUBLE PRECISION[]
)
LOCATION ('gphdfs://sdw1.dh.greenplum.com:8020/plaintext/export')
FORMAT 'TEXT' (
    DELIMITER ';'
)
ENCODING 'UTF8';
CREATE EXTERNAL TABLE
INSERT INTO export_dummy_greek
SELECT * FROM greek;
INSERT 0 2
\connect - :OLD_GP_USER
You are now connected to database "gphdfs_db" as user "gpadmin".
--ALTER ROLE _hadoop_perm_test_role
--WITH
--CREATEEXTTABLE(type='readable', protocol='gphdfs')
--CREATEEXTTABLE(type='writable');
grant all on protocol gphdfs to _hadoop_perm_test_role;
GRANT
\connect - _hadoop_perm_test_role
You are now connected to database "gphdfs_db" as user "_hadoop_perm_test_role".
/* The following should finally work! */
CREATE EXTERNAL TABLE dummy_greek (
	letter CHARACTER(1),
	english_word VARCHAR,
	some_array DOUBLE PRECISION[]
)
LOCATION ('gphdfs://sdw1.dh.greenplum.com:8020/plaintext/greek_utf8.txt')
FORMAT 'TEXT'
ENCODING 'UTF8';
CREATE EXTERNAL TABLE
SELECT some_array[2] FROM dummy_greek
ORDER BY letter
OFFSET 1 LIMIT 1;
 some_array 
------------
        -90
(1 row)

DROP EXTERNAL TABLE dummy_greek;
DROP EXTERNAL TABLE
DROP EXTERNAL TABLE export_dummy_greek;
DROP EXTERNAL TABLE
\connect - :OLD_GP_USER
You are now connected to database "gphdfs_db" as user "gpadmin".
revoke all on protocol gphdfs from _hadoop_perm_test_role;
REVOKE
DROP ROLE IF EXISTS _hadoop_perm_test_role;
DROP ROLE
