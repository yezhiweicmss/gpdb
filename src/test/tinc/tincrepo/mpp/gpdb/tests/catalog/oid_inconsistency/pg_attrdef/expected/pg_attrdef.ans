-- start_ignore
-- end_ignore
drop database if exists attrdef_db;
psql:/path/sql_file:1: NOTICE:  database "attrdef_db" does not exist, skipping
DROP DATABASE
create database attrdef_db;
CREATE DATABASE
\c attrdef_db
You are now connected to database "attrdef_db" as user "gpadmin".
create or replace function verify(varchar) returns bigint as
$$
        select count(distinct(foo.oid)) from (
               (select oid from pg_attrdef
               where adrelid = $1::regclass)
               union
               (select oid from gp_dist_random('pg_attrdef')
               where adrelid = $1::regclass)) foo;
$$ language sql;
CREATE FUNCTION
-- Table with defaults
drop table if exists t cascade;
psql:/path/sql_file:1: NOTICE:  table "t" does not exist, skipping
DROP TABLE
create table t(a int, b int default 0);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
-- Inherits
drop table if exists t_inherits;
psql:/path/sql_file:1: NOTICE:  table "t_inherits" does not exist, skipping
DROP TABLE
create table t_inherits(a int, b int) inherits(t);
psql:/path/sql_file:1: NOTICE:  Table has parent, setting distribution columns to match parent table
psql:/path/sql_file:1: NOTICE:  merging column "a" with inherited definition
psql:/path/sql_file:1: NOTICE:  merging column "b" with inherited definition
CREATE TABLE
select verify('t_inherits');
 verify 
--------
      1
(1 row)

drop table if exists t_like;
psql:/path/sql_file:1: NOTICE:  table "t_like" does not exist, skipping
DROP TABLE
create table t_like (like t including defaults);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'distributed by' clause, defaulting to distribution columns from LIKE table
CREATE TABLE
select verify('t_like');
 verify 
--------
      1
(1 row)

-- Add column
alter table t add column c int default(10);
ALTER TABLE
select verify('t');
 verify 
--------
      2
(1 row)

drop table if exists ao_t;
psql:/path/sql_file:1: NOTICE:  table "ao_t" does not exist, skipping
DROP TABLE
create table ao_t(a int, b int default 0) with(appendonly=true);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
alter table ao_t add column c varchar default 'xyz';
ALTER TABLE
select verify('ao_t');
 verify 
--------
      2
(1 row)

drop table if exists co_t;
psql:/path/sql_file:1: NOTICE:  table "co_t" does not exist, skipping
DROP TABLE
create table co_t(a int, b int default 0) with(appendonly=true, orientation=column);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
alter table co_t add column c varchar default 'xyz';
ALTER TABLE
select verify('co_t');
 verify 
--------
      2
(1 row)

-- Alter column
alter table t alter column c set default(7);
ALTER TABLE
select verify('t');
 verify 
--------
      2
(1 row)

alter table ao_t alter column c set default('abc');
ALTER TABLE
select verify('ao_t');
 verify 
--------
      2
(1 row)

alter table co_t alter column c set default('abc');
ALTER TABLE
select verify('co_t');
 verify 
--------
      2
(1 row)

-- Serial type
drop table if exists t_serial;
psql:/path/sql_file:1: NOTICE:  table "t_serial" does not exist, skipping
DROP TABLE
create table t_serial(a serial, b varchar default 'xyz');
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "t_serial_a_seq" for serial column "t_serial.a"
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
select verify('t_serial');
 verify 
--------
      2
(1 row)

drop table if exists ao_serial;
psql:/path/sql_file:1: NOTICE:  table "ao_serial" does not exist, skipping
DROP TABLE
create table ao_serial(a serial, b varchar default 'xyz') with(appendonly=true);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "ao_serial_a_seq" for serial column "ao_serial.a"
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
select verify('ao_serial');
 verify 
--------
      2
(1 row)

drop table if exists co_serial;
psql:/path/sql_file:1: NOTICE:  table "co_serial" does not exist, skipping
DROP TABLE
create table co_serial(a serial, b varchar default 'xyz') with(appendonly=true, orientation=column);
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create implicit sequence "co_serial_a_seq" for serial column "co_serial.a"
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
select verify('co_serial');
 verify 
--------
      2
(1 row)

-- Alter Type
alter table co_t alter column b type bigint;
ALTER TABLE
select verify('co_t');
 verify 
--------
      2
(1 row)

-- Partitioned tables
set client_min_messages='error';
SET
CREATE TABLE pt1 (id int, date date, amt decimal(10,2) default 0.0) DISTRIBUTED BY (id)
PARTITION BY RANGE (date)
      (PARTITION Jan08 START (date '2008-01-01') INCLUSIVE ,
      PARTITION Feb08 START (date '2008-02-01') INCLUSIVE ,
      PARTITION Mar08 START (date '2008-03-01') INCLUSIVE
      END (date '2008-04-01') EXCLUSIVE);
CREATE TABLE
select verify('pt1');
 verify 
--------
      1
(1 row)

select verify('pt1_1_prt_jan08');
 verify 
--------
      1
(1 row)

select verify('pt1_1_prt_feb08');
 verify 
--------
      1
(1 row)

select verify('pt1_1_prt_mar08');
 verify 
--------
      1
(1 row)

set gp_default_storage_options='appendonly=true';
SET
CREATE TABLE ao_pt1 (id int, date date, amt decimal(10,2) default 0.0) DISTRIBUTED BY (id)
PARTITION BY RANGE (date)
      (PARTITION Jan08 START (date '2008-01-01') INCLUSIVE ,
      PARTITION Feb08 START (date '2008-02-01') INCLUSIVE ,
      PARTITION Mar08 START (date '2008-03-01') INCLUSIVE
      END (date '2008-04-01') EXCLUSIVE);
CREATE TABLE
select verify('ao_pt1');
 verify 
--------
      1
(1 row)

select verify('ao_pt1_1_prt_jan08');
 verify 
--------
      1
(1 row)

select verify('ao_pt1_1_prt_feb08');
 verify 
--------
      1
(1 row)

select verify('ao_pt1_1_prt_mar08');
 verify 
--------
      1
(1 row)

CREATE TABLE co_pt1 (id int, year int, month int CHECK (month > 0),
       day int CHECK (day > 0), region text default('abc'))
WITH(ORIENTATION=COLUMN)
DISTRIBUTED BY (id)
PARTITION BY RANGE (year)
      SUBPARTITION BY RANGE (month)
      SUBPARTITION TEMPLATE (
      START (1) END (5) EVERY (1),
      DEFAULT SUBPARTITION other_months )
( START (2001) END (2003) EVERY (1),
DEFAULT PARTITION outlying_years );
CREATE TABLE
select verify('co_pt1');
 verify 
--------
      1
(1 row)

select verify('co_pt1_1_prt_3');
 verify 
--------
      1
(1 row)

select verify('co_pt1_1_prt_2_2_prt_3');
 verify 
--------
      1
(1 row)

set client_min_messages='notice';
SET
-- Multiple Alter Table subcommands
alter table co_pt1 alter column month set default 3,
      	    	   add column foo int default 1;
ALTER TABLE
select verify('co_pt1');
 verify 
--------
      3
(1 row)

alter table ao_pt1 add default partition other_regions,
      	    	   alter column amt set not null;
psql:/path/sql_file:1: NOTICE:  CREATE TABLE will create partition "ao_pt1_1_prt_other_regions" for table "ao_pt1"
ALTER TABLE
select verify('ao_pt1');
 verify 
--------
      1
(1 row)

