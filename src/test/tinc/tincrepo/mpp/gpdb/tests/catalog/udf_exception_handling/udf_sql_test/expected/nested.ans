-- @Description Tests nested function blocks with exception
-- 
DROP TABLE IF EXISTS public.test_exception_error,abcd CASCADE;
psql:/path/sql_file:1: NOTICE:  table "abcd" does not exist, skipping
DROP TABLE
DROP FUNCTION IF EXISTS public.test_plpgsql() CASCADE;
DROP FUNCTION
CREATE TABLE public.test_exception_error (a INTEGER NOT NULL);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
CREATE TABLE abcd(a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO abcd SELECT * from generate_series(1, 100);
INSERT 0 100
INSERT INTO public.test_exception_error SELECT * from generate_series(1, 100);
INSERT 0 100
CREATE OR REPLACE FUNCTION public.test_plpgsql() RETURNS VOID AS
$$
BEGIN
    BEGIN
        INSERT INTO public.test_exception_error SELECT * from abcd;
	INSERT INTO public.test_exception_error SELECT * from public.test_exception_error;
        BEGIN
		INSERT INTO public.test_exception_error SELECT * from abcd;
		INSERT INTO public.test_exception_error SELECT * from public.test_exception_error;
		INSERT INTO public.test_exception_error(a) VALUES(1000),(NULL),(1001),(1002);
	        EXCEPTION
	       	    WHEN OTHERS THEN
	            BEGIN
			    RAISE NOTICE 'catching the exception ...1';
		    END;
	END;
        BEGIN
		INSERT INTO public.test_exception_error SELECT * from public.test_exception_error;
	        EXCEPTION
	       	    WHEN OTHERS THEN
	            BEGIN
			    RAISE NOTICE 'catching the exception ...2';
		    END;
	END;
        EXCEPTION
       	    WHEN OTHERS THEN
	    BEGIN
		RAISE NOTICE 'catching the exception ...3';
            END;
	END;
END;
$$
LANGUAGE plpgsql;
CREATE FUNCTION
-- Raises unexpected Exception in function but cmd still should be successful
SELECT public.test_plpgsql();
psql:/path/sql_file:1: NOTICE:  catching the exception ...1
 test_plpgsql 
--------------
 
(1 row)

SELECT count(*) from public.test_exception_error;
 count 
-------
   800
(1 row)

