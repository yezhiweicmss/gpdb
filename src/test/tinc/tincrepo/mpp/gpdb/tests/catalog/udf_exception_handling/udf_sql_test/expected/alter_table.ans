-- @Description Tests ALTER table success and failure case in function with exception
-- 
DROP TABLE IF EXISTS public.test_exception_error CASCADE;
psql:/path/sql_file:1: NOTICE:  table "test_exception_error" does not exist, skipping
DROP TABLE
DROP FUNCTION IF EXISTS test_plpgsql() CASCADE;
psql:/path/sql_file:1: NOTICE:  function test_plpgsql() does not exist, skipping
DROP FUNCTION
CREATE TABLE public.test_exception_error (a INTEGER NOT NULL);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO public.test_exception_error select * from generate_series(1, 100);
INSERT 0 100
-- SUCCESS case
CREATE OR REPLACE FUNCTION public.test_plpgsql() RETURNS VOID AS
$$
BEGIN
    BEGIN
	ALTER TABLE public.test_exception_error set with ( reorganize='true') distributed randomly;
        EXCEPTION
       	    WHEN OTHERS THEN
            BEGIN
			    RAISE NOTICE 'catching the exception ...';
            END;
	END;
END;
$$
LANGUAGE plpgsql;
CREATE FUNCTION
SELECT public.test_plpgsql();
 test_plpgsql 
--------------
 
(1 row)

SELECT count(*) FROM public.test_exception_error;
 count 
-------
   100
(1 row)

INSERT INTO public.test_exception_error SELECT * FROM generate_series(101, 200);
INSERT 0 100
-- FAILURE scenario
CREATE OR REPLACE FUNCTION public.test_plpgsql() RETURNS VOID AS
$$
BEGIN
    BEGIN
	ALTER TABLE public.test_exception_error set with ( reorganize='true') distributed randomly;
        INSERT INTO public.test_exception_error(a) VALUES(NULL);
        EXCEPTION
       	    WHEN OTHERS THEN
            BEGIN
			    RAISE NOTICE 'catching the exception ...';
            END;
	END;
END;
$$
LANGUAGE plpgsql;
CREATE FUNCTION
-- Raises unexpected Exception
SELECT public.test_plpgsql();
psql:/path/sql_file:1: NOTICE:  catching the exception ...
 test_plpgsql 
--------------
 
(1 row)

SELECT count(*) FROM public.test_exception_error;
 count 
-------
   200
(1 row)

