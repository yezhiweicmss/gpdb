-- @Description Tests exception not generated by sql statement, explicit BEGIN nd COOMIT/ABORT in function with exception
-- 

DROP TABLE IF EXISTS test_trans_tab CASCADE;
DROP FUNCTION IF EXISTS test_trans() CASCADE;

CREATE TABLE test_trans_tab ( a int);

-- Exception hit case
CREATE OR REPLACE FUNCTION test_trans() RETURNS INT AS
$body$
	DECLARE
		ct bigint;
	BEGIN
		 INSERT INTO test_trans_tab VALUES (1);
		 ct = 1/0;
		 INSERT INTO test_trans_tab VALUES (2);
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION HIT !!!';
		RETURN 0;
	END;
$body$ 
LANGUAGE 'plpgsql' VOLATILE;

-- Function called which hits exception in Explicit Transaction block which commits
BEGIN;
SELECT test_trans();
INSERT INTO test_trans_tab VALUES (3);
COMMIT;

SELECT * FROM test_trans_tab;

-- Function called which hits exception in Explicit Transaction block which aborts
BEGIN;
SELECT test_trans();
INSERT INTO test_trans_tab VALUES (4);
ABORT;

SELECT * FROM test_trans_tab;


-- Non exception hit case
CREATE OR REPLACE FUNCTION test_trans() RETURNS INT AS
$body$
	DECLARE
		ct bigint;
	BEGIN
		 INSERT INTO test_trans_tab VALUES (5);
		 INSERT INTO test_trans_tab VALUES (6);
		RETURN 2;
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION HIT !!!';
		RETURN 0;
	END;
$body$ 
LANGUAGE 'plpgsql' VOLATILE;

-- Function called which doesn't hit exception in Explicit Transaction block which commits
BEGIN;
SELECT test_trans();
INSERT INTO test_trans_tab VALUES (7);
COMMIT;

SELECT * FROM test_trans_tab;


-- Function called which doesn't hit exception in Explicit Transaction block which aborts
BEGIN;
SELECT test_trans();
INSERT INTO test_trans_tab VALUES (8);
ABORT;

SELECT * FROM test_trans_tab;

