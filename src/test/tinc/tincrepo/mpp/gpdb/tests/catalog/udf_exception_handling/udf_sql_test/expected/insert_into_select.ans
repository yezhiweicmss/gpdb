-- @Description Tests insert into select from function and function calling function success and failure scenarios with exceptions
-- 
DROP TABLE IF EXISTS output CASCADE;
DROP TABLE
DROP TABLE IF EXISTS input CASCADE;
DROP TABLE
DROP FUNCTION IF EXISTS inputArray() CASCADE;
DROP FUNCTION
DROP FUNCTION IF EXISTS outputArray() CASCADE;
DROP FUNCTION
CREATE TABLE input (x INT);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
INSERT INTO input SELECT * from generate_series(1, 10);
INSERT 0 10
CREATE OR REPLACE FUNCTION inputArray()
RETURNS INT[] AS $$
DECLARE
	theArray INT[];
BEGIN
	SELECT array(SELECT * FROM input ORDER BY x) INTO theArray;
	RETURN theArray;
EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Catching the exception ...%', SQLERRM;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION outputArray()
RETURNS VOID AS $$
BEGIN
	CREATE TABLE output AS
	SELECT inputArray()::INT[] AS x;
	INSERT INTO output SELECT inputArray()::INT[];
	vacuum;
EXCEPTION WHEN OTHERS THEN
	RAISE NOTICE 'Catching the exception ...%', SQLERRM;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION
SELECT outputArray();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE output AS SELECT inputArray()::INT[] AS x"
PL/pgSQL function "outputarray" line 2 at SQL statement
psql:/path/sql_file:1: NOTICE:  Catching the exception ...VACUUM cannot run inside a transaction block
 outputarray 
-------------
 
(1 row)

SELECT * FROM output;
psql:/path/sql_file:1: ERROR:  relation "output" does not exist
LINE 1: SELECT * FROM output;
                      ^
CREATE OR REPLACE FUNCTION outputArray()
RETURNS VOID AS $$
BEGIN
	CREATE TABLE output AS
	SELECT inputArray()::INT[] AS x;
	INSERT INTO output SELECT inputArray()::INT[];
EXCEPTION WHEN OTHERS THEN
	RAISE NOTICE 'Catching the exception ...%', SQLERRM;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION
SELECT outputArray();
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'x' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CONTEXT:  SQL statement "CREATE TABLE output AS SELECT inputArray()::INT[] AS x"
PL/pgSQL function "outputarray" line 2 at SQL statement
 outputarray 
-------------
 
(1 row)

SELECT * FROM output;
           x            
------------------------
 {1,2,3,4,5,6,7,8,9,10}
 {1,2,3,4,5,6,7,8,9,10}
(2 rows)

INSERT INTO output SELECT inputArray()::INT[];
INSERT 0 1
SELECT * FROM output;
           x            
------------------------
 {1,2,3,4,5,6,7,8,9,10}
 {1,2,3,4,5,6,7,8,9,10}
 {1,2,3,4,5,6,7,8,9,10}
(3 rows)

