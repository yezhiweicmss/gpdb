-- @Description Tests exception not generated by sql statement, explicit BEGIN nd COOMIT/ABORT in function with exception
-- 
DROP TABLE IF EXISTS test_trans_tab CASCADE;
psql:/path/sql_file:1: NOTICE:  table "test_trans_tab" does not exist, skipping
DROP TABLE
DROP FUNCTION IF EXISTS test_trans() CASCADE;
psql:/path/sql_file:1: NOTICE:  function test_trans() does not exist, skipping
DROP FUNCTION
CREATE TABLE test_trans_tab ( a int);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
-- Exception hit case
CREATE OR REPLACE FUNCTION test_trans() RETURNS INT AS
$body$
	DECLARE
		ct bigint;
	BEGIN
		 INSERT INTO test_trans_tab VALUES (1);
		 ct = 1/0;
		 INSERT INTO test_trans_tab VALUES (2);
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION HIT !!!';
		RETURN 0;
	END;
$body$ 
LANGUAGE 'plpgsql' VOLATILE;
CREATE FUNCTION
-- Function called which hits exception in Explicit Transaction block which commits
BEGIN;
BEGIN
SELECT test_trans();
psql:/path/sql_file:1: NOTICE:  EXCEPTION HIT !!!
 test_trans 
------------
          0
(1 row)

INSERT INTO test_trans_tab VALUES (3);
INSERT 0 1
COMMIT;
COMMIT
SELECT * FROM test_trans_tab;
 a 
---
 3
(1 row)

-- Function called which hits exception in Explicit Transaction block which aborts
BEGIN;
BEGIN
SELECT test_trans();
psql:/path/sql_file:1: NOTICE:  EXCEPTION HIT !!!
 test_trans 
------------
          0
(1 row)

INSERT INTO test_trans_tab VALUES (4);
INSERT 0 1
ABORT;
ROLLBACK
SELECT * FROM test_trans_tab;
 a 
---
 3
(1 row)

-- Non exception hit case
CREATE OR REPLACE FUNCTION test_trans() RETURNS INT AS
$body$
	DECLARE
		ct bigint;
	BEGIN
		 INSERT INTO test_trans_tab VALUES (5);
		 INSERT INTO test_trans_tab VALUES (6);
		RETURN 2;
	EXCEPTION WHEN OTHERS THEN
		RAISE NOTICE 'EXCEPTION HIT !!!';
		RETURN 0;
	END;
$body$ 
LANGUAGE 'plpgsql' VOLATILE;
CREATE FUNCTION
-- Function called which doesn't hit exception in Explicit Transaction block which commits
BEGIN;
BEGIN
SELECT test_trans();
 test_trans 
------------
          2
(1 row)

INSERT INTO test_trans_tab VALUES (7);
INSERT 0 1
COMMIT;
COMMIT
SELECT * FROM test_trans_tab;
 a 
---
 3
 5
 7
 6
(4 rows)

-- Function called which doesn't hit exception in Explicit Transaction block which aborts
BEGIN;
BEGIN
SELECT test_trans();
 test_trans 
------------
          2
(1 row)

INSERT INTO test_trans_tab VALUES (8);
INSERT 0 1
ABORT;
ROLLBACK
SELECT * FROM test_trans_tab;
 a 
---
 6
 3
 5
 7
(4 rows)

