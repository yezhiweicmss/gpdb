-- @Description Tests classical example of function with exception
-- 
DROP TABLE IF EXISTS public.test_exception_error CASCADE;
DROP TABLE
DROP FUNCTION IF EXISTS public.test_plpgsql() CASCADE;
DROP FUNCTION
CREATE TABLE public.test_exception_error (a INTEGER NOT NULL);
psql:/path/sql_file:1: NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE
CREATE OR REPLACE FUNCTION public.test_plpgsql() RETURNS VOID AS
$$
BEGIN
    BEGIN
        INSERT INTO public.test_exception_error(a) VALUES(NULL);
        EXCEPTION
       	    WHEN OTHERS THEN
            BEGIN
			    RAISE NOTICE 'catching the exception ...';
            END;
	END;
END;
$$
LANGUAGE plpgsql;
CREATE FUNCTION
-- Raises unexpected Exception but should not fail the command
SELECT public.test_plpgsql();
psql:/path/sql_file:1: NOTICE:  catching the exception ...
 test_plpgsql 
--------------
 
(1 row)

CREATE OR REPLACE FUNCTION public.test_plpgsql() RETURNS VOID AS
$$
BEGIN
    BEGIN
        INSERT INTO public.test_exception_error(a) VALUES(1), (2), (3), (NULL), (4), (5), (6), (7), (8), (9);
        EXCEPTION
       	    WHEN OTHERS THEN
            BEGIN
			    RAISE NOTICE 'catching the exception ...';
            END;
	END;
END;
$$
LANGUAGE plpgsql;
CREATE FUNCTION
-- Raises unexpected Exception but should not fail the command
SELECT public.test_plpgsql();
psql:/path/sql_file:1: NOTICE:  catching the exception ...
 test_plpgsql 
--------------
 
(1 row)

